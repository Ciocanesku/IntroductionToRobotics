// declare all the pins
const int pinSW = 2; // digital pin connected to switch output
const int pinX = A0; // pin X output
const int pinY = A1; // pin Y output
byte swState = LOW;
int xValue = 0;
int yValue = 0;

// declare all the segments pins
const int segmentPinA = 12;
const int segmentPinB = 10;
const int segmentPinC = 9;
const int segmentPinD = 8;
const int segmentPinE = 7;
const int segmentPinF = 6;
const int segmentPinG = 5;
const int segmentPinDP = 4;
const int segSize = 8;
int currentSegmentIndex = 7; // start with the point


int segments[segSize] = {
  segmentPinA, segmentPinB, segmentPinC, segmentPinD, segmentPinE, segmentPinF, segmentPinG, segmentPinDP
};

const int trasholdRight = 620;
const int trasholdLeft = 420;
const int trasholdUp = 607;
const int trasholdDown = 407;

int movementMatrix[8][4] = {  // UP, DOWN, LEFT, RIGHT
  {-1, 6, 5, 1}, // a
  {0, 6, 5, -1}, // b
  {6, 3, 4, 7}, // c
  {6, -1, 4, 2}, // d
  {6, 3, -1, 2}, // e
  {0, 6, -1, 1}, // f
  {0, 3, -1, -1}, // g
  {-1, -1, 2, -1}, // dp
};

bool moving = false;

const int impossibleMove = -1;

const int blinkTime = 500;  // blink interval
unsigned long lastBlinkTime = 0;
bool segmentOn = false;

int holdSegments[9]; //array for storing the segments that are "clicked"
int holdSegmentsSize = -1;

byte buttonState = HIGH;    // current state of the button
byte lastButtonState = HIGH;  // previous state of the button
byte reading = LOW;
unsigned long buttonPressStartTime = 0;
const int resetTime = 2000;
unsigned long lastDebounceTime = 0;  // time of the last button state change
unsigned long debounceDelay = 50;  // debounce time in milliseconds


void setup() {
  // initialize all the pins
  pinMode(pinSW, INPUT_PULLUP);
  for (int i = 0; i < segSize; i++) {
    pinMode(segments[i], OUTPUT);
  }
  Serial.begin(9600);
}

void loop() {
  xValue = analogRead(pinX);
  yValue = analogRead(pinY);
  reading = digitalRead(pinSW);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();  // update the last debounce time
  }

  if (millis() - lastDebounceTime > debounceDelay) {
    if (reading != buttonState) {
      buttonState = reading;

      if (buttonState == LOW) {
        if (buttonPressStartTime == 0) {
          buttonPressStartTime = millis();  // record the start time of button press
        }
      } else {
        if (millis() - buttonPressStartTime >= resetTime) {
          // if the button has been held for 2 seconds or more, reset calling clearHold()
          clearHold();
        } else {
          holdUnhold(currentSegmentIndex);
          Serial.print(currentSegmentIndex);
        }
        buttonPressStartTime = 0;  // reset the start time when the button is released
      }
    }
  }

  lastButtonState = reading;

  if (moving && xValue >= trasholdLeft && xValue <= trasholdRight && yValue >= trasholdDown && yValue <= trasholdUp) { //button is no more moving
    moving = !moving;
  }

  if (!moving) { //check to start the moving state, and get the next currentSegmentIndex from the moveMatrix
    if (xValue >= trasholdRight) {
      if (movementMatrix[currentSegmentIndex][3] != impossibleMove) { //move right
        currentSegmentIndex = movementMatrix[currentSegmentIndex][3];
      }
      moving = true;
    } else if (xValue <= trasholdLeft) { //move left
      if (movementMatrix[currentSegmentIndex][2] != impossibleMove) {
        currentSegmentIndex = movementMatrix[currentSegmentIndex][2];
      }
      moving = true;
    } else if (yValue <= trasholdDown) { //move down
      if (movementMatrix[currentSegmentIndex][0] != impossibleMove) {
        currentSegmentIndex = movementMatrix[currentSegmentIndex][0];
      }
      moving = true;
    } else if (yValue >= trasholdUp) { //move up
      if (movementMatrix[currentSegmentIndex][1] != impossibleMove) {
        currentSegmentIndex = movementMatrix[currentSegmentIndex][1];
      }
      moving = true;
    }
  }

  // reset all segments
  for (int i = 0; i < segSize; i++) {
    digitalWrite(segments[i], LOW);
  }

  if (segmentOn) {
    digitalWrite(segments[currentSegmentIndex], HIGH);
  }

  for (int i = 0; i <= holdSegmentsSize; i++) {
    if (currentSegmentIndex != holdSegments[i]) {
      digitalWrite(segments[holdSegments[i]], HIGH);
    }
  }

  if (millis() - lastBlinkTime >= blinkTime) { //used to make the current position blink
    lastBlinkTime = millis();
    segmentOn = !segmentOn;
  }
}

void holdUnhold(int i) { //function to add/remove elements from array
  int ok = 0;
  for (int j = 0; j <= holdSegmentsSize && ok == 0; j++) {
    if (holdSegments[j] == i) { //if already in the array, delete it from there
      removeFromHold(j);
      ok = 1;
    }
  }
  if (ok == 0) { // if not in the array, put it in
    holdSegmentsSize++;
    holdSegments[holdSegmentsSize] = i;
  }
}

void removeFromHold(int i) {
  for (int k = i; k < holdSegmentsSize; k++) {
    holdSegments[k] = holdSegments[k + 1];
  }
  holdSegmentsSize--;
}

void clearHold() { //function to reset the display
  holdSegmentsSize = -1;
  currentSegmentIndex = 7;
  for (int i = 0; i < segSize; i++) {
    digitalWrite(segments[i], LOW);
  }
}
